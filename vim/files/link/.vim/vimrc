" When started as "evim", evim.vim will already have done these settings, bail
" out.
if v:progname =~? "evim"
	finish
endif

" Get the defaults that most users want.
unlet! skip_defaults_vim
source $VIMRUNTIME/defaults.vim

" URL: http://vim.wikia.com/wiki/Example_vimrc
" Authors: http://vim.wikia.com/wiki/Vim_on_Freenode

" Set 'nocompatible' to ward off unexpected things that your distro might
" have made, as well as sanely reset options when re-sourcing .vimrc
set nocompatible

" Vim with default settings does not allow easy switching between multiple files
" in the same editor window. Users can use multiple split windows or multiple
" tab pages to edit multiple files, but it is still best to enable an option to
" allow easier switching between files.
" One such option is the 'hidden' option, which allows you to re-use the same
" window and switch from an unsaved buffer without saving it first. Also allows
" you to keep an undo history for multiple files when re-using the same window
" in this way. Note that using persistent undo also lets you undo in multiple
" files even in the same window, but is less efficient and is actually designed
" for keeping undo history after closing Vim entirely. Vim will complain if you
" try to quit without saving, and swap files will keep you safe if your computer
" crashes.
set hidden

" Automatically save before commands like :next and :make
"set autowrite
" Not recommended
"set autowriteall

" Better command-line completion
set wildmenu

" Show partial commands in the last line of the screen (status line)
set showcmd

" Highlight searches (use <C-L> to temporarily turn off highlighting; see the
" mapping of <C-L> below)
set hlsearch

" Do incremental searching when it's possible to timeout.
if has('reltime')
	set incsearch
endif

" Modelines have historically been a source of security vulnerabilities. As
" such, it may be a good idea to disable them and use the securemodelines
" script, <http://www.vim.org/scripts/script.php?script_id=1876>.
set nomodeline

" Use case insensitive search, except when using capital letters
set ignorecase
set smartcase

" Allow backspacing over autoindent, line breaks and start of insert action
set backspace=indent,eol,start

"set whichwrap+=<,>,h,l
set whichwrap+=<,>,[,]

" When opening a new line and no filetype-specific indenting is enabled, keep
" the same indent as the line you're currently on. Useful for READMEs, etc.
set autoindent

" Stop certain movements from always going to the first character of a line.
" While this behaviour deviates from that of Vi, it does what most users
" coming from other editors would expect.
set nostartofline

" Display the cursor position on the last line of the screen or in the status
" line of a window
set ruler

" Always display the status line, even if only one window is displayed
set laststatus=2

" Instead of failing a command because of unsaved changes, instead raise a
" dialogue asking if you wish to save changed files.
set confirm

" Use visual bell instead of beeping when doing something wrong
set visualbell

" And reset the terminal code for the visual bell. If visualbell is set, and
" this line is also included, vim will neither flash nor beep. If visualbell
" is unset, this does nothing.
" set t_vb=

" Enable use of the mouse for all modes
set mouse=a

" Set the command window height to 2 lines, to avoid many cases of having to
" "press <Enter> to continue"
set cmdheight=2

" Display line numbers on the left
set number

" Quickly time out on keycodes, but never time out on mappings
set notimeout ttimeout ttimeoutlen=200

" Use <F11> to toggle between 'paste' and 'nopaste'
set pastetoggle=<F11>

" Suffixes that get lower priority when doing tab completion for filenames.
" These are files we are not likely to want to edit or read.
set suffixes=.bak,~,.swp,.o,.info,.aux,.log,.dvi,.bbl,.blg,.brf,.cb,.ind,.idx,.ilg,.inx,.out,.toc,.jpg,.png
set suffixes-=.h
set suffixes-=.obj

" See https://medium.com/usevim/set-complete-e76b9f196f0f
set complete-=i

" Do not recognize octal numbers for Ctrl-A and Ctrl-X, most users find it
" confusing.
set nrformats-=octal

set display+=lastline

if v:version > 703
	set formatoptions+=j " Delete comment character when joining commented lines
endif

if has('path_extra')
	setglobal tags-=./tags tags-=./tags; tags^=./tags;
endif

" Indentation settings for using 4 spaces instead of tabs.
" Do not change 'tabstop' from its default value of 8 with this setup.
"set shiftwidth=4
"set softtabstop=4
"set expandtab

" Indentation settings for using hard tabs for indent. Display tabs as
" four characters wide.
set shiftwidth=4
set tabstop=4
set smarttab

" Map Y to act like D and C, i.e. to yank until EOL, rather than act as yy,
" which is the default
nnoremap Y y$

" Map <C-L> (redraw screen) to also turn off search highlighting until the
" next search
nnoremap <C-L> :nohlsearch<CR><C-L>

" This works in Insert mode and Command-Line mode: press CTRL-F to make the
" wordbefore the cursor uppercase. Handy to type words in lowercase and then
" make them uppercase.
noremap! <C-F> <Esc>gUiw`]a

" https://vi.stackexchange.com/questions/2162/why-doesnt-the-backspace-key-work-in-insert-mode
" "You can also make backspace in normal mode delete characters by mapping it to the X command"
" "I think that "_X would be "more natural" behaviour for <BS>."
nnoremap <BS> "_X
xnoremap <BS> "_x

" https://vimconfig.com/
set errorbells " Beep or flash screen on errors

" https://linuxhint.com/vimrc_tutorial/

" This one greatly improves the quality of life for programmers. It allows folding code blocks for easier navigation through the code.
set foldenable

" The next option is to open most folds by default.
set foldlevelstart=10

" It would be nice to have a shortcut for opening/closing folds, right? Let’s bind it to the spacebar.
nnoremap <Space> za

" This next option tells Vim to fold based on indentation. For Python programmers, this is like a blessing.
set foldmethod=indent

" https://github.com/amix/vimrc/blob/master/vimrcs/basic.vim

" Sets how many lines of history VIM has to remember
if &history < 1000
	set history=1000
endif

if &tabpagemax < 50
	set tabpagemax=50
endif

if !empty(&viminfo)
	set viminfo^=!
endif
set sessionoptions-=options

" Set to auto read when a file is changed from the outside
"set autoread

" With a map leader it's possible to do extra key combinations
" like <Leader>w saves the current file
let mapleader = "-"
nnoremap \ -

" Fast saving
" nnoremap <Leader>w :w!<CR>

" :W sudo saves the file
" (useful for handling the permission-denied error)
command W w !sudo tee % > /dev/null

" Set 5 lines to the cursor - when moving vertically using j/k
set scrolloff=5

" Avoid garbled characters in Chinese language windows OS
let $LANG='en'
set langmenu=en
source $VIMRUNTIME/delmenu.vim
source $VIMRUNTIME/menu.vim

" Ignore compiled files
set wildignore=*.o,*~,*.pyc
if has("win16") || has("win32")
	set wildignore+=.git\*,.hg\*,.svn\*
else
	set wildignore+=*/.git/*,*/.hg/*,*/.svn/*,*/.DS_Store
endif

" Don't redraw while executing macros (good performance config)
set lazyredraw

" For regular expressions turn magic on
set magic

" Show matching brackets when text indicator is over them
set showmatch
" How many tenths of a second to blink when matching brackets
set matchtime=2

" No annoying sound on errors
" set noerrorbells
" set novisualbell
" set t_vb=
" set tm=500

" Properly disable sound on errors on MacVim
" if has("gui_macvim")
"	 autocmd GUIEnter * set vb t_vb=
" endif

" Add a bit extra margin to the left
set foldcolumn=1

" Enable syntax highlighting
if has("syntax") && !exists('g:syntax_on')
	syntax enable
	let c_comment_strings=1
endif

" If using a dark background within the editing area and syntax highlighting
" turn on this option as well
set background=dark

" Enable 256 colors palette in Gnome Terminal
if $COLORTERM == "gnome-terminal" || $COLORTERM == "truecolor" || &term == "xterm-256color"
	set t_Co=256
endif

try
	colorscheme desert
catch
endtry

" Set extra options when running in GUI mode
if has("gui_running")
	set guioptions-=T
	set guioptions-=e
	set t_Co=256
	set guitablabel=%M\ %t
endif

" Set utf-8 as standard encoding and en_US as the standard language
set encoding=utf-8

" Use Unix as the standard file type
set ffs=unix,dos,mac

" Turn backup off, since most stuff is in SVN, git et.c anyway...
" set nobackup
" set nowb
" set noswapfile

set backupcopy=yes

" Linebreak on 500 characters
" set lbr
" set tw=500

" Smart indent
set smartindent
" Wrap lines
set wrap

" Visual mode pressing * or # searches for the current selection
" Super useful! From an idea by Michael Naumann
vnoremap <Silent> * :<C-u>call VisualSelection('', '')<CR>/<C-R>=@/<CR><CR>
vnoremap <Silent> # :<C-u>call VisualSelection('', '')<CR>?<C-R>=@/<CR><CR>

" Map <Space> to / (search) and Ctrl-<Space> to ? (backwards search)
" nnoremap <Space> /
" nnoremap <C-space> ?

" Disable highlight when <Leader>l is pressed
nnoremap <Silent> <Leader>l :nohlsearch<CR>

" Smart way to move between windows
nnoremap <C-J> <C-W>j
nnoremap <C-K> <C-W>k
nnoremap <C-H> <C-W>h
nnoremap <C-L> <C-W>l

" Close the current buffer
nnoremap <Leader>bd :Bclose<CR>:tabclose<CR>gT

" Close all the buffers
nnoremap <Leader>ba :bufdo bd<CR>

nnoremap <Leader>j :bnext<CR>
nnoremap <Leader>k :bprevious<CR>

" Useful mappings for managing tabs
nnoremap <Leader>tn :tabnew<CR>
nnoremap <Leader>to :tabonly<CR>
nnoremap <Leader>tc :tabclose<CR>
nnoremap <Leader>tm :tabmove
nnoremap <Leader>t<Leader> :tabnext

" Let 'tl' toggle between this and the last accessed tab
let g:lasttab = 1
nnoremap <Leader>tl :exe "tabn ".g:lasttab<CR>
autocmd TabLeave * let g:lasttab = tabpagenr()

if has("mac") || has("macunix")
	autocmd BufNewFile,BufRead /private/**/gopass** setlocal noswapfile nobackup noundofile
else
	autocmd BufNewFile,BufRead /dev/shm/gopass.* setlocal noswapfile nobackup noundofile
endif

" Opens a new tab with the current buffer's path
" Super useful when editing files in the same directory
nnoremap <Leader>te :tabedit <c-r>=expand("%:p:h")<CR>/

" Switch CWD to the directory of the open buffer
nnoremap <Leader>cd :cd %:p:h<CR>:pwd<CR>

" Specify the behavior when switching between buffers
try
	set switchbuf=useopen,usetab,newtab
	set showtabline=2
catch
endtry

" When editing a file, always jump to the last known cursor position.
" Don't do it when the position is invalid, when inside an event handler
" (happens when dropping a file on gvim) and for a commit message (it's
" likely a different one than last time).
autocmd BufReadPost *
	\ if line("'\"") >= 1 && line("'\"") <= line("$") && &ft !~# 'commit'
	\ |   exe "normal! g`\""
	\ | endif

" Format the status line
set statusline=\ %{HasPaste()}%F%m%r%h\ %w\ \ CWD:\ %r%{getcwd()}%h\ \ \ Line:\ %l\ \ Column:\ %c

" Remap VIM 0 to first non-blank character
nnoremap 0 ^
vnoremap 0 ^
nnoremap ^ 0
vnoremap ^ 0

" Move a line of text using ALT+[jk] or Command+[jk] on mac
nnoremap <M-j> mz:m+<CR>`z
nnoremap <M-k> mz:m-2<CR>`z
vnoremap <M-j> :m'>+<CR>`<my`>mzgv`yo`z
vnoremap <M-k> :m'<-2<CR>`>my`<mzgv`yo`z

"if has("mac") || has("macunix")
"	nnoremap <D-j> <M-j>
"	nnoremap <D-k> <M-k>
"	vnoremap <D-j> <M-j>
"	vnoremap <D-k> <M-k>
"endif

" CTRL-U in insert mode deletes a lot. Use CTRL-G u to first break undo,
" so that you can undo CTRL-U after inserting a line break.
" Revert with ":iunmap <C-U>".
" See https://vim.fandom.com/wiki/Recover_from_accidental_Ctrl-U
inoremap <C-U> <C-G>u<C-U>
inoremap <C-W> <C-G>u<C-W>

" Don't use Ex mode, use Q for formatting.
" Revert with ":unmap Q".
nnoremap Q gq

" Delete trailing white space on save, useful for some filetypes ;)
fun! CleanExtraSpaces()
	let save_cursor = getpos(".")
	let old_query = getreg('/')
	silent! %s/\s\+$//e
	call setpos('.', save_cursor)
	call setreg('/', old_query)
endfun

if has("autocmd")
	autocmd BufWritePre *.txt,*.js,*.py,*.wiki,*.sh,*.coffee :call CleanExtraSpaces()

	" Make shift-insert work like in Xterm
	autocmd GUIEnter * if !<SID>MapExists("<S-Insert>", "nvso") | execute "noremap <S-Insert> <MiddleMouse>" | endif
	autocmd GUIEnter * if !<SID>MapExists("<S-Insert>", "ic") | execute "noremap! <S-Insert> <MiddleMouse>" | endif

	" Attempt to determine the type of a file based on its name and possibly its
	" contents. Use this to allow intelligent auto-indenting for each filetype,
	" and for plugins that are filetype specific.
	filetype indent plugin on
endif

" Pressing -ss will toggle and untoggle spell checking
nnoremap <Leader>ss :setlocal spell!<CR>

" Shortcuts using <Leader>
nnoremap <Leader>sn ]s
nnoremap <Leader>sp [s
nnoremap <Leader>sa zg
nnoremap <Leader>s? z=

set list
set listchars=tab:━━➔,space:·,nbsp:␣,trail:•,eol:¶,precedes:❰,extends:❱
"match WarningMsg '\s\+$'
"set listchars=tab:━━➔,space:·,nbsp:␣,trail:\ ,eol:¶,precedes:❰,extends:❱
match ErrorMsg '\s\+$'
"set showbreak=↳\
highlight NonText ctermfg=black
highlight SpecialKey ctermfg=darkgray

" Remove the Windows ^M - when the encodings gets messed up
nnoremap <Leader>m mmHmt:%s/<C-V><CR>//ge<CR>'tzt'm

" Quickly open a buffer for scribble
nnoremap <Leader>q :e ~/buffer<CR>

" Quickly open a markdown buffer for scribble
nnoremap <Leader>x :e ~/buffer.md<CR>

" Toggle paste mode on and off
nnoremap <Leader>pp :setlocal paste!<CR>

" Move temporary files to a secure location to protect against CVE-2017-1000382
if exists('$XDG_CACHE_HOME')
	let &g:directory=$XDG_CACHE_HOME
else
	let &g:directory=$HOME . '/.cache'
endif
let &g:undodir=&g:directory . '/vim/undo//'
let &g:backupdir=&g:directory . '/vim/backup//'
let &g:directory.='/vim/swap//'
" Create directories if they doesn't exist
if ! isdirectory(expand(&g:directory))
	silent! call mkdir(expand(&g:directory), 'p', 0700)
endif
if ! isdirectory(expand(&g:backupdir))
	silent! call mkdir(expand(&g:backupdir), 'p', 0700)
endif
if ! isdirectory(expand(&g:undodir))
	silent! call mkdir(expand(&g:undodir), 'p', 0700)
endif

" Returns true if paste mode is enabled
function! HasPaste()
	if &paste
		return 'PASTE MODE  '
	endif
	return ''
endfunction

" Don't close window, when deleting a buffer
command! Bclose call <SID>BufcloseCloseIt()
function! <SID>BufcloseCloseIt()
	let l:currentBufNum = bufnr("%")
	let l:alternateBufNum = bufnr("#")

	if buflisted(l:alternateBufNum)
		buffer #
	else
		bnext
	endif

	if bufnr("%") == l:currentBufNum
		new
	endif

	if buflisted(l:currentBufNum)
		execute("bdelete! ".l:currentBufNum)
	endif
endfunction

function! CmdLine(str)
	call feedkeys(":" . a:str)
endfunction

function! VisualSelection(direction, extra_filter) range
	let l:saved_reg = @"
	execute "normal! vgvy"

	let l:pattern = escape(@", "\\/.*'$^~[]")
	let l:pattern = substitute(l:pattern, "\n$", "", "")

	if a:direction == 'gv'
		call CmdLine("Ack '" . l:pattern . "' " )
	elseif a:direction == 'replace'
		call CmdLine("%s" . '/'. l:pattern . '/')
	endif

	let @/ = l:pattern
	let @" = l:saved_reg
endfunction

" Convenient command to see the difference between the current buffer and the
" file it was loaded from, thus the changes you made.
" Only define it when not defined already.
" Revert with: ":delcommand DiffOrig".
if !exists(":DiffOrig")
  command DiffOrig vert new | set bt=nofile | r ++edit # | 0d_ | diffthis
		  \ | wincmd p | diffthis
endif

" vim:set filetype=vim shiftwidth=4:
